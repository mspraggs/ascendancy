// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REFGENERATORS_ASCENDANCY_SERIALISATION_H_
#define FLATBUFFERS_GENERATED_REFGENERATORS_ASCENDANCY_SERIALISATION_H_

#include "flatbuffers/flatbuffers.h"

namespace ascendancy {
namespace serialisation {

struct Vector;

struct Matrix;

struct ConstRefGenerator;

struct GenericRefGenerator;

struct Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<double> *data() const {
    return GetPointer<const flatbuffers::Vector<double> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<double>> data) {
    fbb_.AddOffset(Vector::VT_DATA, data);
  }
  explicit VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VectorBuilder &operator=(const VectorBuilder &);
  flatbuffers::Offset<Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<Vector> CreateVector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<double>> data = 0) {
  VectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Vector> CreateVectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<double> *data = nullptr) {
  return ascendancy::serialisation::CreateVector(
      _fbb,
      data ? _fbb.CreateVector<double>(*data) : 0);
}

struct Matrix FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Vector>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Vector>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct MatrixBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Vector>>> data) {
    fbb_.AddOffset(Matrix::VT_DATA, data);
  }
  explicit MatrixBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MatrixBuilder &operator=(const MatrixBuilder &);
  flatbuffers::Offset<Matrix> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Matrix>(end);
    return o;
  }
};

inline flatbuffers::Offset<Matrix> CreateMatrix(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Vector>>> data = 0) {
  MatrixBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Matrix> CreateMatrixDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Vector>> *data = nullptr) {
  return ascendancy::serialisation::CreateMatrix(
      _fbb,
      data ? _fbb.CreateVector<flatbuffers::Offset<Vector>>(*data) : 0);
}

struct ConstRefGenerator FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NUM_SAMPLES = 4,
    VT_VALUE = 6
  };
  uint32_t num_samples() const {
    return GetField<uint32_t>(VT_NUM_SAMPLES, 0);
  }
  const Vector *value() const {
    return GetPointer<const Vector *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUM_SAMPLES) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyTable(value()) &&
           verifier.EndTable();
  }
};

struct ConstRefGeneratorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_samples(uint32_t num_samples) {
    fbb_.AddElement<uint32_t>(ConstRefGenerator::VT_NUM_SAMPLES, num_samples, 0);
  }
  void add_value(flatbuffers::Offset<Vector> value) {
    fbb_.AddOffset(ConstRefGenerator::VT_VALUE, value);
  }
  explicit ConstRefGeneratorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConstRefGeneratorBuilder &operator=(const ConstRefGeneratorBuilder &);
  flatbuffers::Offset<ConstRefGenerator> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ConstRefGenerator>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConstRefGenerator> CreateConstRefGenerator(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t num_samples = 0,
    flatbuffers::Offset<Vector> value = 0) {
  ConstRefGeneratorBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_num_samples(num_samples);
  return builder_.Finish();
}

struct GenericRefGenerator FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NUM_SAMPLES = 4,
    VT_VALUES = 6
  };
  uint32_t num_samples() const {
    return GetField<uint32_t>(VT_NUM_SAMPLES, 0);
  }
  const Matrix *values() const {
    return GetPointer<const Matrix *>(VT_VALUES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_NUM_SAMPLES) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyTable(values()) &&
           verifier.EndTable();
  }
};

struct GenericRefGeneratorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_num_samples(uint32_t num_samples) {
    fbb_.AddElement<uint32_t>(GenericRefGenerator::VT_NUM_SAMPLES, num_samples, 0);
  }
  void add_values(flatbuffers::Offset<Matrix> values) {
    fbb_.AddOffset(GenericRefGenerator::VT_VALUES, values);
  }
  explicit GenericRefGeneratorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GenericRefGeneratorBuilder &operator=(const GenericRefGeneratorBuilder &);
  flatbuffers::Offset<GenericRefGenerator> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GenericRefGenerator>(end);
    return o;
  }
};

inline flatbuffers::Offset<GenericRefGenerator> CreateGenericRefGenerator(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t num_samples = 0,
    flatbuffers::Offset<Matrix> values = 0) {
  GenericRefGeneratorBuilder builder_(_fbb);
  builder_.add_values(values);
  builder_.add_num_samples(num_samples);
  return builder_.Finish();
}

}  // namespace serialisation
}  // namespace ascendancy

#endif  // FLATBUFFERS_GENERATED_REFGENERATORS_ASCENDANCY_SERIALISATION_H_
